
////////////////////////////////////////////////////////
////////////////       OPENGL     //////////////////////
////////////////////////////////////////////////////////

Search - 
	* OPENGL_NOTES
	* OPENGL_DEFINITIONS
	* OPENGL_NAMING
	* OPENGL_FUNCTIONS 
	* OPENGL_SHADING_LANGUAGE

////////////////////////////////////////////////////////
////////////////   OPENGL_NOTES  ///////////////////////
////////////////////////////////////////////////////////

Overview:
	Fundamental unt of rendering are primitives( point, line, triangle). Rendering
	uses the hardwae accelerator rasterizer.

Graphics Pipeline:
	Front End - 
	- Vertex Fetch
	- Vertex Shader
	- Tessellation Control Shader
	- Tessellation
	- Tessellation Evaluation Shader
	- Geometry Shader
	- Raterization
	Back End - 
	- Fragment Shader
	- Framebuffer Operations

Shader Stages:
	- Vertex Shaders
	- Tessellation control
	- Evaluation shaders
	- Geometry Shaders
	- Fragment Shaders
	- Compute Shaders

NOTE: At a minimum there must be a vertex shader or compute shader.
NOTE: Minumum to see pixels must include a fragment shader.

General Observations:
	- Changing OpenGL Object states generally require that the object is first
	  bound to the OpenGL Context.  


////////////////////////////////////////////////////////
////////////////  OPENGL_DEFINITIONS   /////////////////
////////////////////////////////////////////////////////

Vertex Fetching:
	Fixed-function stage of the OpenGL Pipeline that provides inputs to
	the vertex shader.

Vertex Shader:
	The only mandatory stage in the graphics pipeline.

Degenerate Primitive:
	A line with zero length or a triangle wth zero area.

Clip Space:
	Coordinate system for the OpenGL pipeline.

Shader Object:
	Source code for a shader. The shader compiles here.

Program Object:
	Stores multiple shader objects for one or more shader stages

Buffer Object (BO):
	Store an array of unformatted memory allocated by the OpenGL context. Usage
	is for storing vertex data, pixel data, etc.
	- Created with glGenBuffers()
	- Bind to the OpenGL context with glBindBuffer()
	- Deleted with glDeleteBuffers()
	NOTE: Buffer can be allocated as mutable or immutable

Vertex Array Object (VAO):
	An Object that represents the vertex fetch stage of the OpenGL pipeline
	and is used to supply input to the vertex shader. Stores the format of 
	the vertex data and the Buffer Objects. Maintains all of the state related
	to the input to the OpenGL pipeline?
	- Enable array access by glEnableVertexAttribArray()
	NOTE: VAO's do not copy, freeze, or store the contents of references buffers.
	NOTE: Array access is disabled until the enable function is called
	NOTE: GL_ARRAY_BUFFER is not a part of VAO's state

Vertex Buffer Object (VBO):
	Buffer Object used as a source for vertex array data. Need to setup
	the vertex format for an attribute array and the source data for 
	that array. 
	NOTE: Two ways to use a VBO, one combines two processes into one function


////////////////////////////////////////////////////////
////////////////  OPENGL_NAMING   //////////////////////
////////////////////////////////////////////////////////

	gl - Naming prefix for all OpenGl functions
	v  - Vector or Array (used interchangeably)
	f  - Floating-point
	fv - Vector of floating-point values 

	GL_POINTS 
	GL_LINES
	GL_TRIANGLES

NAMING_SHADER_TYPES:
	GL_COMPUTE_SHADER
	GL_VERTEX_SHADER
	GL_TESS_CONTROL_SHADER
	GL_TESS_EVALUATION_SHADER
	GL_GEOMETRY_SHADER
	GL_FRAGMENT_SHADER

////////////////////////////////////////////////////////
//////////////// OPENGL_FUNCTIONS //////////////////////
////////////////////////////////////////////////////////

void glClearBufferfv (GLenum Buffer, GLint drawBuffer, const GLfloat *value);
	Purpose: Set a specified buffer to a color
	Parameters:
		Buffer	   - The buffer to be changed
		drawBuffer - An index to specify which buffer in the case of multiple
					 output buffers.
		value	   - The color to be written into the buffer.

GLuint glCreateShader (GLenum shaderType)
	Purpose: Creates an empty shader object, ready to accept source code and
			 be compiled.
	Parameters:
		shaderType - The type of shader to be created. 
	Return:
		Reference value to the shader object. Returns 0 if error.

void glShaderSource (GLuint shader, GLsizei count, const GLchar **string,
				    const GLint *length)
	Purpose: Writes source code to the specified shader object, rewriting
			 any previous code.
	Parameters:
		shader - Reference to the shader object to write to.
		count  - Number of elements in the string and length arrays.
		string - Array of pointers to strings containing the source code
				 to be loaded into the shader.
		length - Array of string lengths.

void glCompileShader (GLuint shader)
	Purpose: Compiles whatever source code is contained in the shader object.
	Parameters:
		shader - Shader object to be compiled.

GLuint glCreateProgram ()
	Purpose: Creates a program object to which you can attach shader objects.
	Return:
		Reference value of an empty shader program. Returns 0 if error.

void glAttachShader (GLuint program, GLuint shader)
	Purpose: Attaches a shader object to a program object.
	Parameters:
		program - Program object to attach a shader object to.
		shader  - Shader object that will be attached.

void glLinkProgram (GLuint program)
	Purpose: Links all of the shader objects attached to a program object
			 together.
	Parameters:
		program - The reference value of the program object to be linked.

void glDeleteShader (GLuint shader)
	Purpose: Deletes a shader object. Once a shader has been linked into a
			 program object, the program contains the binary code and the
			 shader is no longer needed.
	Parameters:
		shader - The shader object to be deleted.

void glCreateVertexArrays (GLsizei n, GLuint* arrays)
	Purpose: Obtains the references to n previously unused vertex array
			 objects initialized to the default state.
	Parameters:
		n	   - The number of vertex array objects to create.
		arrays - Array to hold the references of the objects.

void glBindVertexArray (GLuint array)
	Purpose: Binds the vertex array objects specified by the given
			 object references.
	Parameters:
		array - An array of vertex array object references.

void glUseProgram (GLuint program)
	Purpose: Tell OpenGL to use a specified Program Object for rendering.
	Parameters:
		program - Reference of the program object to use.

void glDrawArrays (GLenum mode, GLint first, GLsizei, count)
	Purpose: To send vertices into the OpenGL pipeline. 
	Parameters:
		mode  - Tells OpenGL what type of graphics primitive to render.
		first - Starting index in the enabled arrays.
		count - The number of vertices to render. 

void glPointSize (GLfloat size)
	Purpose: Sets the diameter of the point in pixels
	Parameters:
		size - The size of which to make the new diameter.

////////////////////////////////////////////////////////
////////////// OPENGL_SHADING_LANGUAGE  ////////////////
////////////////////////////////////////////////////////

	Getting data between shaders is done by declaring global variables
	using the in and out storage qualifies.

	main () -
		Start of the shader execution.

	Connection Variables:

	gl_Position 
	gl_VertexID